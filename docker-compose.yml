services:
  # ----------- Keycloak -----------
  keycloak:
    image: quay.io/keycloak/keycloak:26.3.3
    container_name: keycloak
    command: ["start-dev","--http-port=8080","--hostname-strict=false","--http-management-port=9000","--health-enabled=true"]
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    ports: ["8082:8080","9001:9000"]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "bash -lc 'exec 3<>/dev/tcp/127.0.0.1/9000; printf \"GET /health/ready HTTP/1.0\\r\\n\\r\\n\" >&3; head -n 1 <&3 | grep -q \" 200 \"'"
        ]
      interval: 10s
      timeout: 5s
      retries: 30

  # ----------- Redis -----------
  redis:
    image: redis:8.2
    container_name: redis
    command: ["redis-server","--appendonly","yes"]
    ports: ["6379:6379"]
    healthcheck:
      test: [ "CMD","redis-cli","ping" ]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [ danipa-net ]
    restart: unless-stopped

  # ----------- Vault -----------
  vault:
    image: hashicorp/vault:1.20.3
    container_name: danipa-vault
    command: [ "server","-log-level=info" ]
    environment:
      VAULT_API_ADDR: "http://vault:8200"
      VAULT_LOCAL_CONFIG: |
        { "ui": true, "disable_mlock": true,
          "listener": [{ "tcp": { "address": "0.0.0.0:8200", "tls_disable": true } }],
          "storage": { "file": { "path": "/vault/data" } } }
    ports: [ "18300:8200" ]
    cap_add: [ "IPC_LOCK" ]
    volumes: [ "vault-data:/vault/data" ]
    healthcheck:
      # exit 0 (active) or 2 (standby) are both OK for us
      test: [ "CMD-SHELL", "vault status -address=http://127.0.0.1:8200 >/dev/null 2>&1; ec=$$?; [ $$ec -eq 0 -o $$ec -eq 2 ]" ]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 15s
    networks: [ danipa-net ]
    restart: unless-stopped

  # ----------- Vault Init/Unseal (one-shot helper) -----------
  vault-init:
    image: alpine:3.20
    depends_on:
      vault:
        condition: service_healthy
    environment:
      # used only as a default; we also pass --vault-addr explicitly
      VAULT_ADDR: "http://vault:8200"
    volumes:
      - ./infra/vault/scripts:/work:ro
      - ./infra/vault/keys:/keys
    entrypoint: [ "/bin/sh","-lc" ]
    command: >
      apk add --no-cache curl jq >/dev/null 2>&1 || true;
      /work/init-unseal.sh --vault-addr http://vault:8200 --outfile /keys/vault-keys.json

  # ----------- Config Server -----------
  config-server:
    build:
      context: ./danipa-config-server
      dockerfile: Dockerfile
    container_name: danipa-config-server
    ports: [ "8088:8088" ]
    environment:
      SPRING_PROFILES_ACTIVE: "composite"
      SPRING_CONFIG_IMPORT: "optional:vault://"
      SPRING_CLOUD_VAULT_URI: "http://vault:8200"
      SPRING_CLOUD_VAULT_AUTHENTICATION: "TOKEN"
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,env,refresh,configprops"
      MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"
      MANAGEMENT_HEALTH_VAULT_ENABLED: "false"
      LOG_DIR: /app/logs/danipa-config-server
      JAVA_TOOL_OPTIONS: >-
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=75
        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    volumes:
      - ./config-repo:/config-repo
      - ./logs/config:/app/logs/danipa-config-server
      - config_secrets:/opt/secrets:ro
    healthcheck:
      test: [ "CMD-SHELL","curl -fsS http://127.0.0.1:8088/actuator/health | grep -q 'UP'" ]
      interval: 10s
      timeout: 5s
      retries: 30
    depends_on:
      vault: { condition: service_healthy }
      redis: { condition: service_healthy }
      config-server-agent: { condition: service_healthy }
    networks: [ danipa-net ]
    restart: unless-stopped

  # ----------- Config Server Agent (Vault) -----------
  config-server-agent:
    image: hashicorp/vault:1.20.3
    container_name: config-server-agent
    entrypoint:
      - sh
      - -lc
      - |
        set -eu
        mkdir -p /opt/secrets
        chmod 0755 /opt/secrets || true
        chown -R vault:vault /opt/secrets || true
        (
          while true; do
            for f in /opt/secrets/.vault-token /opt/secrets/config-client.env; do
              [ -f "$$f" ] || continue
              chown 999:999 "$$f" 2>/dev/null || true
              chmod 0644 "$$f" 2>/dev/null || true
            done
            sleep 1
          done
        ) &
        exec vault agent -config=/vault/agent.hcl -log-level=info
    environment:
      VAULT_ADDR: "http://vault:8200"
      VAULT_APP_PATH: "danipa-config-server,composite"
    cap_add: [ "IPC_LOCK" ]
    volumes:
      - config_secrets:/opt/secrets
      - ./infra/vault/approle/config-server-dev:/vault/approle:ro
      - ./infra/vault/templates:/vault/templates:ro
      - ./infra/vault/agents/config-server-agent.hcl:/vault/agent.hcl:ro
    healthcheck:
      test: [ "CMD-SHELL", "test -s /opt/secrets/.vault-token -a -s /opt/secrets/config-client.env" ]
      interval: 5s
      timeout: 3s
      retries: 20
    depends_on:
      vault: { condition: service_healthy }
    networks: [ danipa-net ]
    restart: unless-stopped

  # ----------- Eureka Server -----------
  eureka-server:
    build:
      context: ./danipa-eureka-server
    container_name: danipa-eureka-server
    ports: [ "8761:8761" ]
    environment:
      SPRING_PROFILES_ACTIVE: "${APP_ENV:-dev}"
      SPRING_CONFIG_IMPORT: "optional:configserver:"
      SPRING_CLOUD_CONFIG_URI: "${SPRING_CLOUD_CONFIG_URI:-http://config-server:8088}"
      SPRING_APPLICATION_NAME: "danipa-eureka-server"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:-http://eureka-server:8761/eureka}"
      LOG_DIR: /app/logs/danipa-eureka-server
    volumes:
      - ./logs/eureka:/app/logs/danipa-eureka-server
      - eureka_secrets:/opt/secrets:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "bash -lc 'exec 3<>/dev/tcp/127.0.0.1/8761; printf \"GET /actuator/health HTTP/1.0\\r\\n\\r\\n\" >&3; head -n 1 <&3 | grep -q \" 200 \"'"
        ]
      interval: 10s
      timeout: 5s
      retries: 30
    depends_on:
      keycloak: { condition: service_healthy }
      config-server: { condition: service_healthy }
      eureka-agent: { condition: service_healthy }
    networks: [ danipa-net ]
    restart: unless-stopped

  # ----------- Eureka Agent (Vault) -----------
  eureka-agent:
    image: hashicorp/vault:1.20.3
    container_name: eureka-agent
    entrypoint:
      - sh
      - -lc
      - |
        set -eu
        mkdir -p /opt/secrets
        chown -R vault:vault /opt/secrets
        exec vault agent -config=/vault/agent.hcl -log-level=info
    environment:
      VAULT_ADDR: "http://vault:8200"
    cap_add: [ "IPC_LOCK" ]
    volumes:
      - eureka_secrets:/opt/secrets
      - ./infra/vault/approle/eureka-dev:/vault/approle:ro
      - ./infra/vault/templates:/vault/templates:ro
      - ./infra/vault/agents/eureka-agent.hcl:/vault/agent.hcl:ro
    healthcheck:
      test: [ "CMD-SHELL", "test -s /opt/secrets/.vault-token -a -s /opt/secrets/config-client.env" ]
      interval: 5s
      timeout: 3s
      retries: 20
    depends_on:
      vault: { condition: service_healthy }
    networks: [ danipa-net ]
    restart: unless-stopped

  # ----------- Fintech Service -----------
  fintech-service:
    build:
      context: ./danipa-fintech-service
    container_name: danipa-fintech-service
    ports: [ "8080:8080", "5005:5005" ]
    environment:
      SPRING_PROFILES_ACTIVE: "${APP_ENV:-dev}"
      SPRING_CONFIG_IMPORT: "optional:configserver:"
      SPRING_CLOUD_CONFIG_URI: "${SPRING_CLOUD_CONFIG_URI:-http://config-server:8088}"
      SPRING_APPLICATION_NAME: "danipa-fintech-service"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:-http://eureka-server:8761/eureka}"
      LOG_DIR: /app/logs/danipa-fintech-service
    volumes:
      - ./logs/fintech:/app/logs/danipa-fintech-service
      - fintech_secrets:/opt/secrets:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "bash -lc 'exec 3<>/dev/tcp/127.0.0.1/8080; printf \"GET /actuator/health HTTP/1.0\\r\\n\\r\\n\" >&3; head -n 1 <&3 | grep -q \" 200 \"'"
        ]
      interval: 10s
      timeout: 5s
      retries: 30
    depends_on:
      eureka-server: { condition: service_healthy }
      config-server: { condition: service_healthy }
      fintech-agent: { condition: service_healthy }
    networks: [ danipa-net ]
    restart: unless-stopped

  # ----------- Fintech Agent (Vault) -----------
  fintech-agent:
    image: hashicorp/vault:1.20.3
    container_name: fintech-agent
    entrypoint:
      - sh
      - -lc
      - |
        set -eu
        mkdir -p /opt/secrets
        chown -R vault:vault /opt/secrets
        exec vault agent -config=/vault/agent.hcl -log-level=info
    environment:
      VAULT_ADDR: "http://vault:8200"
    cap_add: [ "IPC_LOCK" ]
    volumes:
      - fintech_secrets:/opt/secrets
      - ./infra/vault/approle/fintech-dev:/vault/approle:ro
      - ./infra/vault/templates:/vault/templates:ro
      - ./infra/vault/agents/fintech-agent.hcl:/vault/agent.hcl:ro
    healthcheck:
      test: [ "CMD-SHELL", "test -s /opt/secrets/.vault-token -a -s /opt/secrets/config-client.env" ]
      interval: 5s
      timeout: 3s
      retries: 20
    depends_on:
      vault: { condition: service_healthy }
    networks: [ danipa-net ]
    restart: unless-stopped

  # ----------- Postgres (dev) -----------
  postgres-dev:
    image: postgres:17.6
    profiles: [ "dev" ]
    container_name: danipa-postgres-dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER_DEV:-danipa_owner_dev}
      POSTGRES_DB: ${POSTGRES_DB_DEV:-danipa_fintech_db_dev}
      POSTGRES_PASSWORD_FILE: /opt/pg-secrets/POSTGRES_PASSWORD
    ports:
      - "${PG_PORT_DEV:-5433}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata_dev:/var/lib/postgresql/data
      - ./init/dev:/docker-entrypoint-initdb.d:ro
      - ./backups/dev:/backups
      - pg_secrets:/opt/pg-secrets:rw
    depends_on:
      postgres-agent: { condition: service_healthy }
    networks: [ danipa-net ]
    restart: unless-stopped

  postgres-agent:
    image: hashicorp/vault:1.20.3
    container_name: postgres-agent
    entrypoint:
      - sh
      - -lc
      - |
        set -eu
        mkdir -p /opt/pg-secrets
        chown -R vault:vault /opt/pg-secrets
        exec vault agent -config=/vault/agent.hcl -log-level=info
    environment:
      VAULT_ADDR: "http://vault:8200"
    cap_add: [ "IPC_LOCK" ]
    volumes:
      - pg_secrets:/opt/pg-secrets
      - ./infra/vault/approle/fintech-dev:/vault/approle:ro
      - ./infra/vault/templates:/vault/templates:ro
      - ./infra/vault/agents/postgres-agent.hcl:/vault/agent.hcl:ro
    healthcheck:
      test: [ "CMD-SHELL","test -s /opt/pg-secrets/POSTGRES_PASSWORD" ]
      interval: 5s
      timeout: 3s
      retries: 20
    depends_on:
      vault: { condition: service_healthy }
    networks: [ danipa-net ]
    restart: unless-stopped

  # ----------- pgAdmin (optional for dev) -----------
  pgadmin:
    image: dpage/pgadmin4:9.8
    container_name: danipa-pgadmin
    profiles: [ "dev" ]
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: patrick@danipa.com
      PGADMIN_DEFAULT_PASSWORD: changeMe!
      PGADMIN_LISTEN_PORT: 8081
    ports:
      - "8081:8081"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      postgres-dev:
        condition: service_healthy
    networks: [ danipa-net ]
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://127.0.0.1:8081/misc/ping || exit 1" ]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 20s

  # ----------- Logstash -----------
  logstash:
    image: docker.elastic.co/logstash/logstash:9.1.3
    container_name: logstash
    expose:
      - "4560"   # JSON/TCP input for app logs (internal only)
      - "9600"   # Node API (internal only)
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    environment:
      LS_JAVA_OPTS: "-Xms256m -Xmx256m"
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS -m 5 http://127.0.0.1:9600/_node | grep -Eq '\"status\":\"(green|yellow)\"'" ]
      interval: 10s
      timeout: 5s
      retries: 12
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks: [ danipa-net ]
    restart: unless-stopped

  # ----------- Elasticsearch -----------
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.3
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS -m 5 http://127.0.0.1:9200/_cluster/health | grep -Eq '\"status\":\"(green|yellow)\"'" ]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 60s
    networks: [ danipa-net ]

  # ----------- Kibana -----------
  kibana:
    image: docker.elastic.co/kibana/kibana:9.1.3
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    healthcheck:
      # available once Kibana is up; OK if it takes a while on first boot
      test: [ "CMD-SHELL", "curl -fsS http://127.0.0.1:5601/api/status | grep -q '\"level\":\"available\"'" ]
      interval: 20s
      timeout: 5s
      retries: 30
      start_period: 60s
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks: [ danipa-net ]
    restart: unless-stopped

  # ----------- Kafka -----------
  kafka:
    image: bitnami/kafka:3.9
    container_name: kafka
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=CDV_9wo0TrSIkeeg6AcOUQ
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"
    volumes:
      - bus-kafka-data:/bitnami/kafka
    healthcheck:
      test: [ "CMD", "/opt/bitnami/kafka/bin/kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 90s
    networks: [ danipa-net ]
    restart: unless-stopped

volumes:
  redis-data:
  es-data:
  bus-kafka-data:
  vault-data:
  pgdata_dev:
  pgdata_staging:
  pgdata_prod:
  pgadmin_data:
  config_secrets:
    external: true
    name: config_secrets
  pg_secrets:
  eureka_secrets:
  fintech_secrets:

networks:
  danipa-net:
    driver: bridge
